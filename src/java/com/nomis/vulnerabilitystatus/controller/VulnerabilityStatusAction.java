/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nomis.vulnerabilitystatus.controller;

import com.nomis.operationsManagement.AccessManager;
import com.nomis.operationsManagement.OrganizationUnitAttributesManager;
import com.nomis.operationsManagement.UserActivityManager;
import com.nomis.ovc.business.SiteSetup;
import com.nomis.ovc.business.User;
import com.nomis.ovc.business.VulnerabilityStatus;
import com.nomis.ovc.dao.DaoUtility;
import com.nomis.ovc.util.AppConstant;
import com.nomis.ovc.util.DateManager;
import com.nomis.ovc.util.AppManager;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

/**
 *
 * @author smomoh
 */
public class VulnerabilityStatusAction extends org.apache.struts.action.Action {

    /* forward name="success" path="" */
    private static final String SUCCESS = "success";

    /**
     * This is the action called from the Struts framework.
     * @param mapping The ActionMapping used to select this instance.
     * @param form The optional ActionForm bean for this request.
     * @param request The HTTP Request we are processing.
     * @param response The HTTP Response we are processing.
     * @throws java.lang.Exception
     * @return
     */
    @Override
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)
            throws Exception 
    {
        VulnerabilityStatusForm vsform=(VulnerabilityStatusForm)form;
        HttpSession session=request.getSession();
        String moduleName="Vulnerability status setup";
        //OrganizationUnitAttributesManager ouaManager=new OrganizationUnitAttributesManager();
        //ouaManager.setOrganizationUnitAttributes(session, level3OuId,userName,hheform.getCboId());
        AppManager appManager=new AppManager();
        String userName=appManager.getCurrentUserName(session);
        String requiredAction =vsform.getActionName();
        User user=appManager.getCurrentUser(session);
        if(AccessManager.isUserInOrganizationUnitSetupRole(user))
        {
            setButtonState(session,"false","true");
        }
        else
        {
            setButtonState(session,"true","true");
            request.setAttribute("accessErrorMsg", AppConstant.DEFAULT_ACCESS_MSG);
            return mapping.findForward(SUCCESS);
        }
        
        String param=request.getParameter("p");
        if(param !=null)
        requiredAction=param;
        
        setButtonState(session,"false","true");
        getVulnerabilityStatusList(session);
        if(requiredAction==null)
        {
            vsform.reset(mapping, request);
        }
        else if(requiredAction.equalsIgnoreCase("details"))
        {
            DaoUtility util=new DaoUtility();
            String vulnerabilityStatusId=request.getParameter("id");
            VulnerabilityStatus vs=util.getVulnerabilityStatusDaoInstance().getVulnerabilityStatus(vulnerabilityStatusId);
            if(vs !=null)
            {
                vsform.setVulnerabilityStatusId(vulnerabilityStatusId);
                vsform.setVulnerabilityStatusName(vs.getVulnerabilityStatusName());
                vsform.setVsEnabled(vs.getVsEnabled());
                vsform.setVsCategory(vs.getVsCategory());
                setButtonState(session,"true","false");
            }
            return mapping.findForward(SUCCESS);
        }
        else if(requiredAction.equalsIgnoreCase("save"))
        {
            DaoUtility util=new DaoUtility();
            VulnerabilityStatus vs=getVulnerabilityStatus(vsform,userName);
            util.getVulnerabilityStatusDaoInstance().saveVulnerabilityStatus(vs);
            saveUserActivity(userName,moduleName,"Saved new Vulnerability status record with name "+vs.getVulnerabilityStatusName());
            getVulnerabilityStatusList(session);
        }
        else if(requiredAction.equalsIgnoreCase("update"))
        {
            DaoUtility util=new DaoUtility();
            VulnerabilityStatus vs=getVulnerabilityStatus(vsform,userName);
            util.getVulnerabilityStatusDaoInstance().updateVulnerabilityStatus(vs);
            saveUserActivity(userName,moduleName,"Updated Vulnerability status record with name "+vs.getVulnerabilityStatusName());
            getVulnerabilityStatusList(session);
        }
        else if(requiredAction.equalsIgnoreCase("delete"))
        {
            DaoUtility util=new DaoUtility();
            VulnerabilityStatus vs=getVulnerabilityStatus(vsform,userName);
            util.getVulnerabilityStatusDaoInstance().markForDelete(vs);
            saveUserActivity(userName,moduleName,"Marked Vulnerability status record with name "+vs.getVulnerabilityStatusName()+" for delete");
            getVulnerabilityStatusList(session);
        }
        vsform.reset(mapping, request);
        return mapping.findForward(SUCCESS);
    }
    private VulnerabilityStatus getVulnerabilityStatus(VulnerabilityStatusForm vsform,String userName)
    {
        VulnerabilityStatus vs=new VulnerabilityStatus();
        vs.setDateCreated(DateManager.getCurrentDateInstance());
        vs.setLastModifiedDate(DateManager.getCurrentDateInstance());
        vs.setRecordedBy(userName);
        vs.setVsEnabled(vsform.getVsEnabled());
        vs.setVulnerabilityStatusId(vsform.getVulnerabilityStatusId());
        vs.setVulnerabilityStatusName(vsform.getVulnerabilityStatusName());
        vs.setVsCategory(vsform.getVsCategory());
        return vs;
    }
    public void setButtonState(HttpSession session,String saveDisabled,String modifyDisabled)
    {
        session.setAttribute("vsSaveDisabled", saveDisabled);
        session.setAttribute("vsModifyDisabled", modifyDisabled);
    }
    private void saveUserActivity(String userName,String userAction,String description)
    {
        UserActivityManager uam=new UserActivityManager();
        uam.saveUserActivity(userName, userAction,description);
    }
    private void getVulnerabilityStatusList(HttpSession session) throws Exception
    {
        DaoUtility util=new DaoUtility();
        List list=util.getVulnerabilityStatusDaoInstance().getAllVulnerabilityStatus();
        if(list==null)
        list=new ArrayList();
        session.setAttribute("vulnerabilityStatusList", list);
    }
}
