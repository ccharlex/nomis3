/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nomis.ovc.dao;

import com.nomis.ovc.business.VulnerabilityStatus;
import com.nomis.ovc.util.AppConstant;
import com.nomis.ovc.util.AppUtility;
import java.util.List;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

/**
 *
 * @author smomoh
 */
public class VulnerabilityStatusDaoImpl implements VulnerabilityStatusDao
{
    Session session;
    Transaction tx;
    SessionFactory sessions;
    String markedForDeleteQuery=" and vs.markedForDelete=0";
    public int saveVulnerabilityStatus(VulnerabilityStatus vs) throws Exception
    {
        int result=0;
        try
        {
            if(vs !=null && this.getVulnerabilityStatus(vs.getVulnerabilityStatusId()) ==null && this.getVulnerabilityStatusByName(vs.getVulnerabilityStatusName())==null)
            {
                if(vs.getVulnerabilityStatusId()==null || vs.getVulnerabilityStatusId().trim().length()<11)
                vs.setVulnerabilityStatusId(getUniqueRecordId());
                session = HibernateUtil.getSession();
                tx = session.beginTransaction();
                session.save(vs);
                tx.commit();
                closeSession(session);
            }
        }
         catch (Exception ex)
         {
             closeSession(session);
            throw new Exception(ex);
         }
        return result;
    }
    public int updateVulnerabilityStatus(VulnerabilityStatus vs) throws Exception
    {
        int result=0;
        if(vs !=null && this.getVulnerabilityStatus(vs.getVulnerabilityStatusId()) !=null)
        {
            VulnerabilityStatus vs2=this.getVulnerabilityStatusByName(vs.getVulnerabilityStatusName());
            if(vs2 !=null)
            {
                if(!vs.getVulnerabilityStatusId().equalsIgnoreCase(vs2.getVulnerabilityStatusId()))
                return 0;
            }
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            session.update(vs);
            tx.commit();
            closeSession(session);
        }
        return result;
    }
    public int markForDelete(VulnerabilityStatus vs) throws Exception
    {
        int result=0;
        System.err.println("Inside markForDelete");
        if(vs !=null && this.getVulnerabilityStatus(vs.getVulnerabilityStatusId()) !=null)
        {
            System.err.println("vs.getVulnerabilityStatusId() is "+vs.getVulnerabilityStatusId());
            vs.setMarkedForDelete(AppConstant.MARKEDFORDELETE);
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            session.update(vs);
            tx.commit();
            closeSession(session);
        }
        return result;
    }
    public int deleteVulnerabilityStatus(VulnerabilityStatus vs) throws Exception
    {
        int result=0;
        if(vs !=null && this.getVulnerabilityStatus(vs.getVulnerabilityStatusId()) !=null)
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            session.delete(vs);
            tx.commit();
            closeSession(session);
        }
        return result;
    }
    public VulnerabilityStatus getVulnerabilityStatus(String vulnerabilityStatusId) throws Exception
    {
        VulnerabilityStatus vs=null;
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            List list = session.createQuery("from VulnerabilityStatus vs where vs.vulnerabilityStatusId=:uid"+markedForDeleteQuery).setString("uid", vulnerabilityStatusId).list();
            tx.commit();
            closeSession(session);
            if(list !=null && !list.isEmpty())
            {
                vs=(VulnerabilityStatus)list.get(0);
            }
        }
         catch (Exception ex)
         {
             closeSession(session);
            throw new Exception(ex);
         }
        return vs;
    }
    public VulnerabilityStatus getVulnerabilityStatusByName(String vulnerabilityStatusName) throws Exception
    {
        VulnerabilityStatus vs=null;
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            List list = session.createQuery("from VulnerabilityStatus vs where vs.vulnerabilityStatusName=:vsn").setString("vsn", vulnerabilityStatusName).list();
            tx.commit();
            closeSession(session);
            if(list !=null && !list.isEmpty())
            {
                vs=(VulnerabilityStatus)list.get(0);
            }
        }
         catch (Exception ex)
         {
             closeSession(session);
            throw new Exception(ex);
         }
        return vs;
    }
    public List getAllVulnerabilityStatus() throws Exception
    {
        List list=null;
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery("from VulnerabilityStatus vs where vs.vulnerabilityStatusId is not null"+markedForDeleteQuery).list();
            tx.commit();
            closeSession(session);
        }
         catch (Exception ex)
         {
             closeSession(session);
            throw new Exception(ex);
         }
        return list;
    }
    public String getUniqueRecordId()
    {
        AppUtility appUtil=new AppUtility();
        String uniqueId=appUtil.generateUniqueId(11);
        try
        {
            if(this.getVulnerabilityStatus(uniqueId) !=null)
            getUniqueRecordId();
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        return uniqueId;
    }
    public void closeSession(Session session)
    {
        if(session !=null && session.isOpen())
        {
            session.close();
        }
    }
}
