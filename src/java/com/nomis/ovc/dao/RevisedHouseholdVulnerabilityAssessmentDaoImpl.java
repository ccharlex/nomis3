/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nomis.ovc.dao;

import com.nomis.ovc.business.RevisedHouseholdVulnerabilityAssessment;
import com.nomis.reports.utils.ReportParameterTemplate;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

/**
 *
 * @author smomoh
 */
public class RevisedHouseholdVulnerabilityAssessmentDaoImpl implements RevisedHouseholdVulnerabilityAssessmentDao
{
    Session session;
    Transaction tx;
    SessionFactory sessions;
    SubQueryGenerator sqg=new SubQueryGenerator();
    String markedForDeleteQuery=" and rhva.markedForDelete=0";
    public List getRevisedHouseholdEnrollmentRecordsForExport(ReportParameterTemplate rpt) throws Exception
    {
        List hheList=new ArrayList();
        try
        {
            SubQueryGenerator sqg=new SubQueryGenerator();
            String additionalOrgUnitQuery="";
            if(rpt !=null && rpt.getLevel2OuId() !=null && rpt.getLevel2OuId().trim().length()>0 && !rpt.getLevel2OuId().equalsIgnoreCase("select") && !rpt.getLevel2OuId().equalsIgnoreCase("All"))
            {
                additionalOrgUnitQuery=sqg.getOrganizationUnitQuery(rpt);
            }
            String query=SubQueryGenerator.getHheRevisedHHVAOrganizationUnitQuery()+additionalOrgUnitQuery+sqg.getHheLastModifiedDateQuery(rpt.getStartDate(),rpt.getEndDate());
            System.err.println(query);
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            List list = session.createQuery(query).list();
            tx.commit();
            closeSession(session);
            if(list !=null)
            {
                for(Object obj:list)
                {
                    Object[] objArray=(Object[])obj;
                    hheList.add(objArray[1]);
                }
            }
        }
         catch (Exception ex)
         {
             closeSession(session);
            throw new Exception(ex);
         }
        return hheList;
    }
    public List getAllHouseholdEnrollmentRecords() throws Exception
    {
        List list=null;
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            list = session.createQuery("from HouseholdVulnerabilityAssessment rhva where rhva.hhUniqueId is not null "+markedForDeleteQuery).list();
            tx.commit();
            closeSession(session);
        }
         catch (Exception ex)
         {
             closeSession(session);
            throw new Exception(ex);
         }
        return list;
    }
    public int getTotalAssessmentScore(RevisedHouseholdVulnerabilityAssessment rhva) throws Exception
    {
       int count=0;
        try
        {
            if(rhva !=null)
            {
                count+=rhva.getCgEngagedInEconomicActivities();
                count+=rhva.getChildUndernourished();
                count+=rhva.getChildrenEnrolledInSchool();
                count+=rhva.getChildrenHasBirthCertificate();
                count+=rhva.getChildrenHasBirthCertificate();
                count+=rhva.getHasViralLoadResult();
                count+=rhva.getHivPositiveLinked();
                count+=rhva.getHivPreventionKnowledge();
                count+=rhva.getHivStatusKnown();
                count+=rhva.getRegularSchoolAttendance();
                count+=rhva.getSocialEmotionalSupport();
                count+=rhva.getStableAdult();
                count+=rhva.getViolenceExperienceReported();
            }
        }
         catch (Exception ex)
         {
             closeSession(session);
            throw new Exception(ex);
         }
        return count;
    }
    public int getUniqueCountOfHouseholdVulnerabilityAssessment() throws Exception
    {
       int count=0;
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            List list = session.createQuery("select count (distinct rhva.hhUniqueId) from RevisedHouseholdVulnerabilityAssessment rhva ").list();
            tx.commit();
            closeSession(session);
            if(list !=null && !list.isEmpty())
            {
                count=Integer.parseInt(list.get(0).toString());
            }
        }
         catch (Exception ex)
         {
             closeSession(session);
            throw new Exception(ex);
         }
        return count;
    }
    public RevisedHouseholdVulnerabilityAssessment getHouseholdVulnerabilityAssessment(String hhUniqueId, Date dateOfAssessment) throws Exception
    {
       RevisedHouseholdVulnerabilityAssessment rhva=null;
        try
        {
            session = HibernateUtil.getSession();
            tx = session.beginTransaction();
            List list = session.createQuery("from RevisedHouseholdVulnerabilityAssessment rhva where rhva.hhUniqueId=:hhId and rhva.dateOfAssessment=:dt").setString("hhId", hhUniqueId).setDate("dt", dateOfAssessment).list();
            tx.commit();
            closeSession(session);
            if(list !=null && !list.isEmpty())
            {
                rhva=(RevisedHouseholdVulnerabilityAssessment)list.get(0);
            }
        }
         catch (Exception ex)
         {
             closeSession(session);
            throw new Exception(ex);
         }
        return rhva;
    }
    public void saveOrUpdateRevisedHouseholdVulnerabilityAssessment(RevisedHouseholdVulnerabilityAssessment hva) throws Exception
    {
        try
        {
            //System.err.println("hhe.getHhUniqueId(): "+hhe.getHhUniqueId()+" hhe.getDateOfEnrollment(): "+DateManager.convertDateToString(hhe.getDateOfEnrollment(),DateManager.DB_DATE_FORMAT));
            if(hva !=null && hva.getDateOfAssessment() !=null)
            {
                if(getHouseholdVulnerabilityAssessment(hva.getHhUniqueId(),hva.getDateOfAssessment()) ==null)
                {
                    saveHouseholdVulnerabilityAssessment(hva);
                    System.err.println("Inside saveOrUpdateRevisedHouseholdVulnerabilityAssessment "+hva.getHhUniqueId()+" after saved");
                }
                else
                updateHouseholdVulnerabilityAssessment(hva);
            }
        }
        catch(Exception ex)
        {
          closeSession(session);  
          ex.printStackTrace();
        }
    }
    public void saveHouseholdVulnerabilityAssessment(RevisedHouseholdVulnerabilityAssessment hva) throws Exception
    {
        try
        {
            //System.err.println("hhUniqueId is "+hva.getHhUniqueId()+" and Date of assessment is "+hva.getDateOfAssessment());
            if(hva !=null && hva.getDateOfAssessment() !=null && getHouseholdVulnerabilityAssessment(hva.getHhUniqueId(),hva.getDateOfAssessment()) ==null)
            {
                session = HibernateUtil.getSession();
                tx = session.beginTransaction();
                session.save(hva);
                tx.commit();
                closeSession(session);
                System.err.println("Household vulneability assessment with id "+hva.getHhUniqueId()+" saved");
            }
        }
        catch(Exception ex)
        {
          closeSession(session);  
          ex.printStackTrace();
        }
    }
    public void updateHouseholdVulnerabilityAssessment(RevisedHouseholdVulnerabilityAssessment hva) throws Exception
    {
        try
        {
            if(hva !=null && hva.getDateOfAssessment() !=null && hva.getHhUniqueId() !=null)
            {
                RevisedHouseholdVulnerabilityAssessment rhva=getHouseholdVulnerabilityAssessment(hva.getHhUniqueId(),hva.getDateOfAssessment());
                if(rhva !=null)
                {
                    if(rhva.getLastModifiedDate().before(hva.getLastModifiedDate()) || rhva.getLastModifiedDate().equals(hva.getLastModifiedDate()))
                    {
                        hva.setId(rhva.getId()); 
                        session = HibernateUtil.getSession();
                        tx = session.beginTransaction();
                        session.update(hva);
                        tx.commit();
                        closeSession(session);
                        System.err.println("Revised Household vulnerability assessment with id "+hva.getHhUniqueId()+" updated");
                    }
                }
            }
        }
        catch(Exception ex)
        {
          closeSession(session);  
          ex.printStackTrace();
        }
    }
    public void deleteHouseholdVulnerabilityAssessment(RevisedHouseholdVulnerabilityAssessment hva) throws Exception
    {
        try
        {
            if(hva !=null && getHouseholdVulnerabilityAssessment(hva.getHhUniqueId(),hva.getDateOfAssessment()) !=null)
            {
                RevisedHouseholdVulnerabilityAssessment rhva=getHouseholdVulnerabilityAssessment(hva.getHhUniqueId(),hva.getDateOfAssessment());
                if(rhva !=null)
                {
                    hva.setId(rhva.getId());
                    session = HibernateUtil.getSession();
                    tx = session.beginTransaction();
                    session.delete(hva);
                    tx.commit();
                    closeSession(session);
                }
                //deleteDependents(hhe.getHhUniqueId());
            }
        }
        catch(Exception ex)
        {
          closeSession(session);  
          ex.printStackTrace();
        }
    }
    public void closeSession(Session session)
    {
        if(session !=null && session.isOpen())
        {
            session.close();
        }
    }
}
